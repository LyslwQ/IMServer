// This file was generated by ODB, object-relational mapping (ORM)
// compiler for C++.
//

#ifndef USER_ODB_HXX
#define USER_ODB_HXX

#include <odb/version.hxx>

#if (ODB_VERSION != 20400UL)
#error ODB runtime version mismatch
#endif

#include <odb/pre.hxx>

#include "User.hxx"

#include <memory>
#include <cstddef>

#include <odb/core.hxx>
#include <odb/traits.hxx>
#include <odb/callback.hxx>
#include <odb/wrapper-traits.hxx>
#include <odb/pointer-traits.hxx>
#include <odb/container-traits.hxx>
#include <odb/no-op-cache-traits.hxx>
#include <odb/result.hxx>
#include <odb/simple-object-result.hxx>

#include <odb/details/unused.hxx>
#include <odb/details/shared-ptr.hxx>

namespace odb
{
  // User
  //
  template <>
  struct class_traits< ::User >
  {
    static const class_kind kind = class_object;
  };

  template <>
  class access::object_traits< ::User >
  {
    public:
    typedef ::User object_type;
    typedef ::User* pointer_type;
    typedef odb::pointer_traits<pointer_type> pointer_traits;

    static const bool polymorphic = false;

    typedef ::tid_t id_type;

    static const bool auto_id = true;

    static const bool abstract = false;

    static id_type
    id (const object_type&);

    typedef
    no_op_pointer_cache_traits<pointer_type>
    pointer_cache_traits;

    typedef
    no_op_reference_cache_traits<object_type>
    reference_cache_traits;

    static void
    callback (database&, object_type&, callback_event);

    static void
    callback (database&, const object_type&, callback_event);
  };
}

#include <odb/details/buffer.hxx>

#include <odb/mysql/version.hxx>
#include <odb/mysql/forward.hxx>
#include <odb/mysql/binding.hxx>
#include <odb/mysql/mysql-types.hxx>
#include <odb/mysql/query.hxx>

namespace odb
{
  // User
  //
  template <typename A>
  struct query_columns< ::User, id_mysql, A >
  {
    // tid
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::tid_t,
        mysql::id_ulonglong >::query_type,
      mysql::id_ulonglong >
    tid_type_;

    static const tid_type_ tid;

    // user_name
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::std::string,
        mysql::id_string >::query_type,
      mysql::id_string >
    user_name_type_;

    static const user_name_type_ user_name;

    // user_passwd
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::std::string,
        mysql::id_string >::query_type,
      mysql::id_string >
    user_passwd_type_;

    static const user_passwd_type_ user_passwd;

    // user_nickName
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::std::string,
        mysql::id_string >::query_type,
      mysql::id_string >
    user_nickName_type_;

    static const user_nickName_type_ user_nickName;

    // faceType
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::int32_t,
        mysql::id_long >::query_type,
      mysql::id_long >
    faceType_type_;

    static const faceType_type_ faceType;

    // customface
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::std::string,
        mysql::id_string >::query_type,
      mysql::id_string >
    customface_type_;

    static const customface_type_ customface;

    // customFaceFomt
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::std::string,
        mysql::id_string >::query_type,
      mysql::id_string >
    customFaceFomt_type_;

    static const customFaceFomt_type_ customFaceFomt;

    // gender
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        bool,
        mysql::id_tiny >::query_type,
      mysql::id_tiny >
    gender_type_;

    static const gender_type_ gender;

    // birthday
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::ttime_t,
        mysql::id_ulonglong >::query_type,
      mysql::id_ulonglong >
    birthday_type_;

    static const birthday_type_ birthday;

    // signature
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::std::string,
        mysql::id_string >::query_type,
      mysql::id_string >
    signature_type_;

    static const signature_type_ signature;

    // address
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::std::string,
        mysql::id_string >::query_type,
      mysql::id_string >
    address_type_;

    static const address_type_ address;

    // phoneNum
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::std::string,
        mysql::id_string >::query_type,
      mysql::id_string >
    phoneNum_type_;

    static const phoneNum_type_ phoneNum;

    // email
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::std::string,
        mysql::id_string >::query_type,
      mysql::id_string >
    email_type_;

    static const email_type_ email;

    // registTime
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::ttime_t,
        mysql::id_ulonglong >::query_type,
      mysql::id_ulonglong >
    registTime_type_;

    static const registTime_type_ registTime;

    // remark
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::std::string,
        mysql::id_string >::query_type,
      mysql::id_string >
    remark_type_;

    static const remark_type_ remark;

    // updateTime
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::ttime_t,
        mysql::id_ulonglong >::query_type,
      mysql::id_ulonglong >
    updateTime_type_;

    static const updateTime_type_ updateTime;

    // teamInfo
    //
    typedef
    mysql::query_column<
      mysql::value_traits<
        ::std::string,
        mysql::id_string >::query_type,
      mysql::id_string >
    teamInfo_type_;

    static const teamInfo_type_ teamInfo;
  };

  template <typename A>
  const typename query_columns< ::User, id_mysql, A >::tid_type_
  query_columns< ::User, id_mysql, A >::
  tid (A::table_name, "`tid`", 0);

  template <typename A>
  const typename query_columns< ::User, id_mysql, A >::user_name_type_
  query_columns< ::User, id_mysql, A >::
  user_name (A::table_name, "`user_name`", 0);

  template <typename A>
  const typename query_columns< ::User, id_mysql, A >::user_passwd_type_
  query_columns< ::User, id_mysql, A >::
  user_passwd (A::table_name, "`user_passwd`", 0);

  template <typename A>
  const typename query_columns< ::User, id_mysql, A >::user_nickName_type_
  query_columns< ::User, id_mysql, A >::
  user_nickName (A::table_name, "`user_nickName`", 0);

  template <typename A>
  const typename query_columns< ::User, id_mysql, A >::faceType_type_
  query_columns< ::User, id_mysql, A >::
  faceType (A::table_name, "`faceType`", 0);

  template <typename A>
  const typename query_columns< ::User, id_mysql, A >::customface_type_
  query_columns< ::User, id_mysql, A >::
  customface (A::table_name, "`customface`", 0);

  template <typename A>
  const typename query_columns< ::User, id_mysql, A >::customFaceFomt_type_
  query_columns< ::User, id_mysql, A >::
  customFaceFomt (A::table_name, "`customFaceFomt`", 0);

  template <typename A>
  const typename query_columns< ::User, id_mysql, A >::gender_type_
  query_columns< ::User, id_mysql, A >::
  gender (A::table_name, "`gender`", 0);

  template <typename A>
  const typename query_columns< ::User, id_mysql, A >::birthday_type_
  query_columns< ::User, id_mysql, A >::
  birthday (A::table_name, "`birthday`", 0);

  template <typename A>
  const typename query_columns< ::User, id_mysql, A >::signature_type_
  query_columns< ::User, id_mysql, A >::
  signature (A::table_name, "`signature`", 0);

  template <typename A>
  const typename query_columns< ::User, id_mysql, A >::address_type_
  query_columns< ::User, id_mysql, A >::
  address (A::table_name, "`address`", 0);

  template <typename A>
  const typename query_columns< ::User, id_mysql, A >::phoneNum_type_
  query_columns< ::User, id_mysql, A >::
  phoneNum (A::table_name, "`phoneNum`", 0);

  template <typename A>
  const typename query_columns< ::User, id_mysql, A >::email_type_
  query_columns< ::User, id_mysql, A >::
  email (A::table_name, "`email`", 0);

  template <typename A>
  const typename query_columns< ::User, id_mysql, A >::registTime_type_
  query_columns< ::User, id_mysql, A >::
  registTime (A::table_name, "`registTime`", 0);

  template <typename A>
  const typename query_columns< ::User, id_mysql, A >::remark_type_
  query_columns< ::User, id_mysql, A >::
  remark (A::table_name, "`remark`", 0);

  template <typename A>
  const typename query_columns< ::User, id_mysql, A >::updateTime_type_
  query_columns< ::User, id_mysql, A >::
  updateTime (A::table_name, "`updateTime`", 0);

  template <typename A>
  const typename query_columns< ::User, id_mysql, A >::teamInfo_type_
  query_columns< ::User, id_mysql, A >::
  teamInfo (A::table_name, "`teamInfo`", 0);

  template <typename A>
  struct pointer_query_columns< ::User, id_mysql, A >:
    query_columns< ::User, id_mysql, A >
  {
  };

  template <>
  class access::object_traits_impl< ::User, id_mysql >:
    public access::object_traits< ::User >
  {
    public:
    struct id_image_type
    {
      unsigned long long id_value;
      my_bool id_null;

      std::size_t version;
    };

    struct image_type
    {
      // tid_
      //
      unsigned long long tid_value;
      my_bool tid_null;

      // user_name_
      //
      details::buffer user_name_value;
      unsigned long user_name_size;
      my_bool user_name_null;

      // user_passwd_
      //
      details::buffer user_passwd_value;
      unsigned long user_passwd_size;
      my_bool user_passwd_null;

      // user_nickName_
      //
      details::buffer user_nickName_value;
      unsigned long user_nickName_size;
      my_bool user_nickName_null;

      // faceType_
      //
      int faceType_value;
      my_bool faceType_null;

      // customface_
      //
      details::buffer customface_value;
      unsigned long customface_size;
      my_bool customface_null;

      // customFaceFomt_
      //
      details::buffer customFaceFomt_value;
      unsigned long customFaceFomt_size;
      my_bool customFaceFomt_null;

      // gender_
      //
      signed char gender_value;
      my_bool gender_null;

      // birthday_
      //
      unsigned long long birthday_value;
      my_bool birthday_null;

      // signature_
      //
      details::buffer signature_value;
      unsigned long signature_size;
      my_bool signature_null;

      // address_
      //
      details::buffer address_value;
      unsigned long address_size;
      my_bool address_null;

      // phoneNum_
      //
      details::buffer phoneNum_value;
      unsigned long phoneNum_size;
      my_bool phoneNum_null;

      // email_
      //
      details::buffer email_value;
      unsigned long email_size;
      my_bool email_null;

      // registTime_
      //
      unsigned long long registTime_value;
      my_bool registTime_null;

      // remark_
      //
      details::buffer remark_value;
      unsigned long remark_size;
      my_bool remark_null;

      // updateTime_
      //
      unsigned long long updateTime_value;
      my_bool updateTime_null;

      // teamInfo_
      //
      details::buffer teamInfo_value;
      unsigned long teamInfo_size;
      my_bool teamInfo_null;

      std::size_t version;
    };

    struct extra_statement_cache_type;

    using object_traits<object_type>::id;

    static id_type
    id (const id_image_type&);

    static id_type
    id (const image_type&);

    static bool
    grow (image_type&,
          my_bool*);

    static void
    bind (MYSQL_BIND*,
          image_type&,
          mysql::statement_kind);

    static void
    bind (MYSQL_BIND*, id_image_type&);

    static bool
    init (image_type&,
          const object_type&,
          mysql::statement_kind);

    static void
    init (object_type&,
          const image_type&,
          database*);

    static void
    init (id_image_type&, const id_type&);

    typedef mysql::object_statements<object_type> statements_type;

    typedef mysql::query_base query_base_type;

    static const std::size_t column_count = 17UL;
    static const std::size_t id_column_count = 1UL;
    static const std::size_t inverse_column_count = 0UL;
    static const std::size_t readonly_column_count = 0UL;
    static const std::size_t managed_optimistic_column_count = 0UL;

    static const std::size_t separate_load_column_count = 0UL;
    static const std::size_t separate_update_column_count = 0UL;

    static const bool versioned = false;

    static const char persist_statement[];
    static const char find_statement[];
    static const char update_statement[];
    static const char erase_statement[];
    static const char query_statement[];
    static const char erase_query_statement[];

    static const char table_name[];

    static void
    persist (database&, object_type&);

    static pointer_type
    find (database&, const id_type&);

    static bool
    find (database&, const id_type&, object_type&);

    static bool
    reload (database&, object_type&);

    static void
    update (database&, const object_type&);

    static void
    erase (database&, const id_type&);

    static void
    erase (database&, const object_type&);

    static result<object_type>
    query (database&, const query_base_type&);

    static unsigned long long
    erase_query (database&, const query_base_type&);

    public:
    static bool
    find_ (statements_type&,
           const id_type*);

    static void
    load_ (statements_type&,
           object_type&,
           bool reload);
  };

  template <>
  class access::object_traits_impl< ::User, id_common >:
    public access::object_traits_impl< ::User, id_mysql >
  {
  };

  // User
  //
}

#include "User-odb.ixx"

#include <odb/post.hxx>

#endif // USER_ODB_HXX
